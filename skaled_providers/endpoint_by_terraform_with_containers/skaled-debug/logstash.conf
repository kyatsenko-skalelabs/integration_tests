#input {
#    tcp {
#        port => 5000
#        codec => plain {
#          charset => "ISO-8859-1"
#        }
##        mode => server
##       codec => json
#    }
#}

#filter {
#    json {
#      source => "message"
#      }
#    }

filter { 

    mutate { add_field => { "logsstash" => "applied" } }


    if [fields][log_format] == "aleth.out" {

        mutate { add_field => { "test_field" => "worked" } }

        grok { 
            match => {"message" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        grok {
            match => {
                "message" => [
                    "(?<log_message_format>sent_to_consensus) = %{NUMBER:sent_to_consensus:int} got_from_consensus = %{NUMBER:got_from_consensus:int} m_transaction_cache = %{NUMBER:m_transaction_cache:int} m_tq = %{NUMBER:m_tq:int} m_bcast_counter = %{NUMBER:m_bcast_counter:int}",
                    "(?<log_message_format>m_received) = %{NUMBER:m_received:int}",
                    "(?<log_message_format>Block sealed) #%{NUMBER:block_number:int}",
                    "(?<log_message_format>Queued vaguely legit-looking transaction) #%{BASE16NUM:transaction_hash}",
                    "(?<log_message_format>Sent txn): %{BASE16NUM:transaction_hash}",
                    "(?<log_message_format>Arrived txn): %{BASE16NUM:transaction_hash}",
                    "(?<log_message_format>Checking)",
                    "(?<log_message_format>Consensus returned 'future')",
                    "(?<log_message_format>createBlock) ID = #%{NUMBER:block_number:int}",
                    "(?<log_message_format>Dropped now-invalid transaction) in pending queue #%{BASE16NUM:transaction_hash}",
                    "(?<log_message_format>Dropping good txn) %{BASE16NUM:transaction_hash}",
                    "%{URI:uri} (?<direction>[<>]+) %{GREEDYDATA:json}",
                    "(?<log_message_format>Imported and best) %{NUMBER:difficulty:int} \(#%{NUMBER:block_number:int}\). Has 0 siblings",
                    "(?<log_message_format>Insterted block with) %{NUMBER:transaction_count:int} transactions",
                    "(?<log_message_format>Live block)",
                    "(?<log_message_format>Mined gas): %{NUMBER:gas_amount:int}",
                    "(?<log_message_format>noteChanged: {%{WORD:note_changed}})",
                    "(?<log_message_format>Paying) %{NUMBER:paying_amount:int} Mwei from sender for gas \(%{NUMBER:gas_amount:int} gas at %{NUMBER:gas_price:int} Kwei\)",
                    "(?<log_message_format>Post state changed)",
                    "(?<log_message_format>Processed) %{NUMBER:transaction_count:int} transactions in %{NUMBER:time_ms:int}\(%{WORD:success_status}\)",
                    "(?<log_message_format>Rejigging seal engine)",
                    "(?<log_message_format>Since) %{DATA} 15ticks",
                    "(?<log_message_format>startedWorking)",
                    "(?<log_message_format>Starting to seal block) #%{NUMBER:block_number:int}",
                    "(?<log_message_format>Successfully imported) %{NUMBER:transaction_success_count:int} of %{NUMBER:transaction_total_count:int} transactions",
                    "(?<log_message_format>Successfully received through broadcast) %{BASE16NUM:transaction_hash}",
                    "(?<log_message_format>Trying to reset state)",
                    "(?<log_message_format>Using existing database)",
                    "(?<log_message_format>Will import consensus-born txn)",
                    "(?<log_message_format>Post-reward stateRoot: is)"
               ]
           }
        }

#        if "_grokparsefailure" in [tags] {
#            drop { }
#        }

        # drop these:
        grok {
            match => {
                "message" => [
                    "%{BASE16NUM}: %{NUMBER} #:%{BASE16NUM} @: \$%{BASE16NUM}",
                    "- Cache -",
		    "\.{6}",
		    "Mining Beneficiary",
		    "programmatic shutdown",
		    "JSONRPC Admin Session Key",
		    "OK,.*started",
		    "starting.*server",
		    "Will start server",
		    "Auto-answer mode is set to",
		    "Important notce",
		    "IPC path is",
		    "Got.*port from command line",
		    "DB path is",
		    "IPC server is",
		    "JSON RPC trace logging mode",
		    "Opened.*DB",
		    "Will stop.*server"
                ]
            }
            add_tag => ["drop"]
        }

        if "drop" in [tags] {
            drop { }
        }

        if [direction] == ">>>" {
            mutate {
            add_field => {"log_message_format" => "request in"}
            }
        }

        if [direction] == "<<<" {
            mutate {
            add_field => {"log_message_format" => "request out"}
            }
        }

        date {
            match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSSSSS"]
        }

        mutate {
            remove_field => ["timestamp"]
        }

    }

}

input {
	beats {
		port => 5000
	}
}

## Add your filters / logstash plugins configuration here

output {
    if [fields][log_format] == "aleth.out" {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
#	        index => "logs-skale-%{[@metadata][beat]}"
                index => "test-skale"
         }
    } else {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
                index => "test-skale0"
        }
    }
}
