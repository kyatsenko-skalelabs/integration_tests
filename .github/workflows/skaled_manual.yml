name: Skaled Manually-Running Tests

on:
  workflow_dispatch:
    inputs:
      suite:
        description: 'Test Suite'
        default: 'internals'
        required: false

      test:
        description: 'Test'
        default: 'pytest'
        required: false

      skaled_provider:
        description: 'Skaled Provider (binary_from_container|binary_as_artifact|container)'
        default: 'binary_from_container'
        required: true

      skaled_release:
        description: 'Skaled Release'
        default: 'develop-latest'
        required: true

jobs:
  main_job:
    runs-on: ubuntu-latest
    env:
      PROJECT: skaled
      SUITE: ${{ github.event.inputs.suite }}
      TEST: ${{ github.event.inputs.test }}
      SKALED_PROVIDER: skaled_providers/${{ github.event.inputs.skaled_provider }}
      SKALED_RELEASE: ${{ github.event.inputs.skaled_release }}
      DATA_DIR: /home/runner/data_dir
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:

    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install python3-pip python3-venv nodejs jq
        sudo npm install -g truffle
        sudo npm install -g yarn
        sudo chown -R runner:runner ~/.config   # HACK

    - name: Add secrets
      run: |
        touch ~/.netrc
        chmod 600 ~/.netrc
        echo "machine github.com" > ~/.netrc
        echo "login ${{ secrets.DIMALIT_ACCESS_TOKEN }}" >> ~/.netrc
        echo "password ${{ secrets.DIMALIT_ACCESS_TOKEN }}" >> ~/.netrc

    - uses: docker-practice/actions-setup-docker@0.0.1
    
    - uses: hashicorp/setup-terraform@v1.1.0

    - uses: actions/checkout@v2

    - run: cd endpoint_by_terraform_with_containers/tf/tf_scripts && terraform init

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Update Environment
      run: |
        ./update_environment.sh $PROJECT+$SUITE

    - name: Run Tests
      run: |
        mkdir $DATA_DIR
        ./run_tests.sh $PROJECT+$SUITE+$TEST

    - name: Save logs
      if: ${{ always() && env.SKALED_PROVIDER == 'skaled_providers/endpoint_by_container' }}
      run: |
        sudo docker logs $(docker ps -a -q) 2>aleth.err 1>aleth.out || true
        sudo chown runner:runner aleth.*
      continue-on-error: true

    - uses: actions/upload-artifact@v2
      if: ${{ always() && env.SKALED_PROVIDER == 'skaled_providers/endpoint_by_container' }}
      continue-on-error: true
      with:
        path: |
          skaled_providers/endpoint_by_container/data_dir/config.json
          aleth.*

    - uses: actions/upload-artifact@v2
      if: ${{ always() && startsWith(env.SKALED_PROVIDER, 'skaled_providers/binary_') }}
      continue-on-error: true
      with:
        name: data_dir
        path: |
          ${{ env.DATA_DIR }}/**/aleth.*
          ${{ env.DATA_DIR }}/**/config.json

